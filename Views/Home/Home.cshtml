@model List<Chat360Client.Models.UserModel>
@{
    ViewBag.Title = "Home";
    var cl = "";
}

 <link rel="stylesheet" href="~/Content/home.css">   
<script>
    var Contacts_URL = '@Url.Action("GetOnlineContacts", "Home")';
    // Compatibility shim
    navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
    // PeerJS object
    var peer = null;
    var callConnected = false;
    var inCall = false;
    var checkTimeOut = true;
    var movements = {TOP:1, TR:2,RIGHT:3,BR:4,DOWN:5, BL:6, LEFT:7,TL:8, RESET:9};
    connectPeer();
    
    var connectedPeers = {};

    // Receiving a call
        
    $(document).ready(function(){
        $('#sendCordinates').on('click', function(){
            var d = new Date();
            window.dataConnection.send(d.getTime());
          
        });
    });
    setInterval(function () {
        if (window.existingCall != null && window.existingCall.open == true) {
            //call is open don't update the id
        }
        else{
        if (IsPeerConnected()) {

        }
        else {
            connectPeer();
        }
        }
    }, 3000);

    function PeerDisconnected() {
        //peer.reconnect();
        var x = 0;
    }
    function PeerClose() {
        var x = 0;
        
    }
       
        // Click handlers setup
        $(function () {
            $('#make-call').click(function () {
                // Initiate a call!
                var call = peer.call($('#callto-id').val(), window.localStream);
                step3(call);
            });
            $('#end-call').click(function () {
                window.existingCall.close();
                step2();
            });
            // Retry if getUserMedia fails
            $('#step1-retry').click(function () {
                $('#step1-error').hide();
                step1();
            });
            // Get things started
            step1();
        });
        function connectPeer() {
            if (peer !== null) {
                if (peer.disconnected == false && peer.destroyed == false && peer.open == false) {
                    peer.destroy();
                    IntiliazePeer();
                }
                else if (peer.disconnected == true && peer.destroyed == false) {
                    peer.destroy();

                    IntiliazePeer();
                }
                else if (peer.disconnected == true && peer.destroyed == true) {
                    
                    peer.destroy();

                    IntiliazePeer();
                }

            }
            else {
                IntiliazePeer();
            }

        }
        function IntiliazePeer() {
            
            if(window.dataConnection!=null)
                window.dataConnection.close();
            peer = new Peer({host: 'chat-360.herokuapp.com', secure: true, port: 443, key: 'peerjs', debug: 3 });
           
            peer.on('open', function() {
                $('#my-id').text(peer.id);
                console.log(peer.id);
                if (peer.id != "" && peer.id != null) {
                    $.post("@Url.Action("SetUserApiKey", "Account")", { apikey: peer.id }, function (data) {
                //check if the apikey was set.
                });
                 }
            });
            // Await connections from others
            peer.on('connection', dataConnect);
            peer.on('call', function (call) {
                // Answer the call automatically (instead of prompting user) for demo purposes
                console.log("Incoming Call");
                $.get("@Url.Action("GetUserFromApiKey", "Account")", { apikey: call.peer }, function (data) {
                    if (data.status == 200) {
                        var val = confirm("Call coming from " + data.username + ". Click Okay to accept and Cancel to reject");
                        if (val == true) {
                            call.answer(window.localStream);
                            callConnected = true;
                            $('#infoMessage').text('');
                            step3(call);
                            $('#video-container').show();
                            $('#callText').text('Currently in call with ' + data.username);
                            $('#mainPage').hide();
                            $('#mainNav').hide();
                        }
                        else {
                            //reject call
                            call.close();
                        }
                    }
                });
            });
            peer.on('error', function   (err) {
                console.log(err);
                if (err.type == 'browser-incompatible') {
                    console.log("Browser is incompatible for Webrtc");
                }
                if (err.type == 'disconnected') {
                    // peer.reconnect();
                }
                if (err.type == 'invalid-id') {
                    console.log("Peer is unavailable currently try agian later.");
                }
                if (err.type == 'network') {
                    console.log("Couldn't connect to the server.");
                    // 
                }
                if (err.type == 'peer-unavailable') {
                    console.log("Peer is unavailable currently try agian later.");
                }
                if (err.type == 'server-error') {
                    console.log("Unable to reach the server");
                }
                if (err.type == 'unavailable-id') {
                    console.log("Peer is unavailable currently try agian later.");
                }
                if (err.type == "socket-closed") {
                    step2();
                }
                if (err.type == 'webrtc') {
                    console.log("Some webrtc error occurred");
                }
                // Return to step 2 if error occurs

            });
            peer.on('close', PeerClose());
            peer.on('disconnected', PeerDisconnected());
        }
        function step1() {
            // Get audio/video stream
            navigator.getUserMedia({ audio: true, video: true }, function (stream) {
                // Set your video displays
                $('#my-video').prop('src', URL.createObjectURL(stream));
                window.localStream = stream;
                step2();
            }, function () { $('#step1-error').show(); });
        }
        function step2() {
            //End call
            $('#step1, #step3').hide();
            $('#step2').show();
            $('#mainPage').show();
            $('#mainNav').show();
            console.log("Call Closed");
            $('#video-container').hide();
            $('.list-group').find('a').removeClass('active');
            $('#centerDiv').hide();
            var c = @Model.Count;
            if(c==0){   
            }
            else
            {    
                $('#infoMessage').text('Select a user to make call');
            }
            inCall = false;
            callConnected = false;
            peer.destroy();
            connectPeer();
        }
        function step3(call) {
            // Hang up on an existing call if present
            if (call != null )
            {
                if (window.existingCall) {
                    window.existingCall.close();
                }
                // Wait for stream on the call, then set peer video display
                call.on('stream', function (stream) {
                    $('#their-video').prop('src', URL.createObjectURL(stream));
                    $('#mainPage').hide();
                    $('#mainNav').hide();
                    $('#video-container').show();
                    $('#infoMessage').text('');
                    callConnected = true;
                    checkTimeOut = false;

                });
                call.on('error', function (error) {
                    console.log(error);
                });
                inCall = true;
                setTimeout(function () {
                    if (callConnected == false && checkTimeOut == true)
                    {
                        //unable to connect call.
                        $('#infoMessage').text('Unable to connect the call');
                        if (window.existingCall)
                        {
                            window.existingCall.close();
                        }
                        inCall = false;
                    }
                    checkTimeOut = true;

                }, 15000);

                
                
                // UI stuff
                window.existingCall = call;
                $('#their-id').text(call.peer);
                call.on('close', step2);
                $('#step1, #step2').hide();
                $('#step3').show();
            }
            else {
                $('#infoMessage').text('Unable to connect the call');
            }
        }

        function makeCall(username) {
            if (inCall)
            {
                $('#infoMessage').text('Already in a call');
                return;
            }
            $.ajax({
                type: "GET",
                url: "@Url.Action("GetUserApiKey", "Account")",
                data: { username: username },
                success: function (data) {
                    if (data !== null && data.apiKey != null) {

                        if (!IsPeerConnected()) {
                            connectPeer();
                        }

                        var call = peer.call(data.apiKey, window.localStream);
                        $('#infoMessage').text("Calling...");
                        step3(call);

                        var c = peer.connect(data.apiKey, {
                            label: 'co-ordinates',
                            serialization: 'none',
                            metadata: {message: 'hi i want to chat with you!'}
                        });
                        c.on('open', function() {
                            dataConnect(c);
                        });
                        c.on('error', function(err) { console.log('There was an error') });
                    }
                    else {
                        $('#infoMessage').text("User not available at this moment.");
                    }
                }
            });
        }
        function IsPeerConnected() {
            if (peer != null) {
                if (peer.open == false) {
                    return false;
                }
                else if (peer.disconnected == true || peer.destroyed == true) {
                    return false;
                }
                else {
                    return true;
                }
            }
            return false;
        }
    

    //Handling data connections
        function dataConnect(connection){
            window.dataConnection = connection;
            if(connection.label == 'co-ordinates'){

                // when data is recieved.
                connection.on('data', function(data){
                    Update(data);
                    console.log(data);
                    
                });
                connection.on('close', function(data){
                    delete connectedPeers[connection.peer];
                    window.dataConnection = null;
                });
            }
            else if(connection.label == 'chat'){
                
            }
            connectedPeers[connection.peer] = 1;

        }

        function eachActiveConnection(fn) {
            var actives = $('.active');
            var checkedIds = {};
            actives.each(function() {
                var peerId = $(this).attr('id');

                if (!checkedIds[peerId]) {
                    var conns = peer.connections[peerId];
                    for (var i = 0, ii = conns.length; i < ii; i += 1) {
                        var conn = conns[i];
                        fn(conn, $(this));
                    }
                }

                checkedIds[peerId] = 1;
            });
        }
        function sendMovementCordinates(val){
            if(window.dataConnect!=null){
                window.dataConnect.send(val);
            }
        }
  </script>


	<div id="mainPage" style="margin-left:0px; margin-right:0px; margin-bottom:0px; height:100%">
		
			<div class=" left col-xs-5 col-sm-3 col-md-3 col-lg-3" style="height: 92vh; padding:0px; margin:0px;">
				
				<div class="list-group" style="height: 92vh; min-height:500px; overflow:auto; margin:0px; padding:0px; border-right:2px solid #d2d8df; background-color:white;" >
					@foreach (var user in @Model)
                     {
                        
                        <a href="#" class="list-group-item" style="border-bottom:1px solid #d2d8df; padding: 10px 0px 10px 15px; height:80px;" data-username="@user.username" data-img="@user.imageUrl">
                            
                            @if(string.IsNullOrEmpty(user.imageUrl))
                            {
                               <img class="img-circle left" src="@Url.Content("~/Images/defaultUser.png")" width="60" height="60"/>
                            }
                            else
                            {
                               <img class="img-circle left" src="@user.imageUrl" width="60" height="60"/>

                            }
						    <span style="padding:10px;"> @user.username </span>
                            @if (user.status)
                            {
                                cl = "online-icon";
                            }
                            else {
                                cl = "offline-icon";
                            }
                            <span class="current-status pull-right @cl"></span>    
					    </a>
                    
                     }
                    
					</div>
			</div>
		
			<div  class="span3 col-xs-7 col-sm-9 col-md-9 col-lg-9" style="max-height:92vh;">
				<center id="center" style="padding-top:50px">
                    <div id="centerDiv">
					    <img src="" name="aboutme" width="140" height="140" id="img-circle" class="img-circle">
					    <h3 id="username"></h3>
					    <a class="btn btn-primary btn-xlg"  onclick="return makeCall(selectedUser)" style="padding:20px;background-color:green; margin-top:10px;">
						    <span class="glyphicon glyphicon-earphone" style="padding-left:5px; padding-right:5px;"></span>
						    Call
					    </a>
					</div>
                    @if(Model.Count == 0)
                    {		
                        <span id="infoMessage" style="margin-top:10px; display:block;"> No Contacts to show go to <a href="@Url.Action("ManageContacts","User")">Manage Contacts </a> to add contacts</span>

                    }
                    else{
                        <span id="infoMessage" style="margin-top:10px; display:block;"> Select a contact to make call.</span>
                    }
				</center>
			</div>
		
	</div>


		 
	<div id="video-container">
		<video id="their-video" autoplay></video>
        <video id="my-video" muted="true" autoplay></video>
        <div id="movementButtons">
            <label id="reset" class="menu_opener_label">Reset</label>
                  <div id="up" class="arrow link_one link_general"></div>
                  <button id="right" class="arrow link_two link_general"></button>
                  <button id="down" class="arrow link_three link_general"></button>
                  <button id="left" class="arrow link_four link_general"></button>
                  <button id="tl" class="arrow link_top_left link_general_left"></button>
                  <button id="tr" class="arrow link_top_right link_general_right"></button>
                  <button id="bl" class="arrow link_bottom_left link_general_left"></button>
                  <button id="br" class="arrow link_bottom_right link_general_right"></button>
            <a  class="btn btn-primary btn-xlg" id="connectButton" style="padding:10px;">


						Connect Device
					</a>

        </div>
		<div id=disconnectCall>
			<center>
				<a  class="btn btn-primary btn-xlg" onclick="return step2()" style="padding:20px;background-color:red; margin-top:10px;">

						<span class="glyphicon glyphicon-earphone" style="padding-left:5px; padding-right:5px;"></span>
						Disconnect
					</a>
				</center>
            <span id="callText" style="display:block;"></span>  
		</div>
        
	</div>
<script src="~/Scripts/home.js"></script>