@model List<string>
@{
    ViewBag.Title = "Home";
}


<h2>Home</h2>
<script>
    // Compatibility shim
    navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
    // PeerJS object
    var peer = null;
    connectPeer();
    
    // Receiving a call
    

        
    setInterval(function () {
        if (window.existingCall != null && window.existingCall.open == true) {
            //call is open don't update the id
        }
        else{
        if (IsPeerConnected()) {

        }
        else {
            connectPeer();
        }
        }
    }, 3000);

    function PeerDisconnected() {
        //peer.reconnect();
        var x = 0;
    }
    function PeerClose() {
        var x = 0;
    }
        
         
        
        // Click handlers setup
        $(function () {
            $('#make-call').click(function () {
                // Initiate a call!
                var call = peer.call($('#callto-id').val(), window.localStream);
                step3(call);
            });
            $('#end-call').click(function () {
                window.existingCall.close();
                step2();
            });
            // Retry if getUserMedia fails
            $('#step1-retry').click(function () {
                $('#step1-error').hide();
                step1();
            });
            // Get things started
            step1();
        });
        function connectPeer() {
            if (peer !== null) {
                if (peer.disconnected == false && peer.destroyed == false && peer.open == false) {
                    peer.destroy();
                    IntiliazePeer();
                }
                else if (peer.disconnected == true && peer.destroyed == false) {
                    peer.destroy();

                    IntiliazePeer();
                }
                else if (peer.disconnected == true && peer.destroyed == true) {
                    
                    peer.destroy();

                    IntiliazePeer();
                }

            }
            else {
                IntiliazePeer();
            }

        }
        function IntiliazePeer() {
            peer = new Peer({ host: 'chat-360.herokuapp.com', secure: true, port: 443, key: 'peerjs', debug: 3 });
           
            peer.on('open', function() {
                $('#my-id').text(peer.id);
                console.log(peer.id);
                if (peer.id != "" && peer.id != null) {
                    $.post("@Url.Action("SetUserApiKey", "Account")", { apikey: peer.id }, function (data) {
                //check if the apikey was set.
                });
                 }
            });
            peer.on('call', function (call) {
                // Answer the call automatically (instead of prompting user) for demo purposes
                $.get("@Url.Action("GetUserFromApiKey", "Account")", { apikey: call.peer }, function (data) {
                    if (data.status == 200) {
                        var val = confirm("Call coming from " + data.username + ". Click Okay to accept and Cancel to reject");
                        if (val == true) {
                            call.answer(window.localStream);

                            step3(call);
                        }
                        else {
                            //reject call
                        }
                    }
                });
            });
            peer.on('error', function   (err) {

                if (err.type == 'browser-incompatible') {
                    console.log("Browser is incompatible for Webrtc");
                }
                if (err.type == 'disconnected') {
                    // peer.reconnect();
                }
                if (err.type == 'invalid-id') {
                    console.log("Peer is unavailable currently try agian later.");
                }
                if (err.type == 'network') {
                    console.log("Couldn't connect to the server.");
                    // 
                }
                if (err.type == 'peer-unavailable') {
                    console.log("Peer is unavailable currently try agian later.");
                }
                if (err.type == 'server-error') {
                    console.log("Unable to reach the server");
                }
                if (err.type == 'unavailable-id') {
                    console.log("Peer is unavailable currently try agian later.");
                }
                if (err.type == "socket-closed") {
                    step2();
                }
                if (err.type == 'webrtc') {
                    console.log("Some webrtc error occurred");
                }
                // Return to step 2 if error occurs

            });
            peer.on('close', PeerClose());
            peer.on('disconnected', PeerDisconnected());
        }
        function step1() {
            // Get audio/video stream
            navigator.getUserMedia({ audio: true, video: true }, function (stream) {
                // Set your video displays
                $('#my-video').prop('src', URL.createObjectURL(stream));
                window.localStream = stream;
                step2();
            }, function () { $('#step1-error').show(); });
        }
        function step2() {
            $('#step1, #step3').hide();
            $('#step2').show();
            peer.destroy();
            connectPeer();

        }
        function step3(call) {
            // Hang up on an existing call if present
            if (call != null) {
                if (window.existingCall) {
                    window.existingCall.close();
                }
                // Wait for stream on the call, then set peer video display
                
                // UI stuff
                window.existingCall = call;
                $('#their-id').text(call.peer);
                call.on('close', step2);
                $('#step1, #step2').hide();
                $('#step3').show();
            }
            else {
                alert("Unable to connect.");
            }
        }

        function makeCall(username) {

            $.ajax({
                type: "GET",
                url: "@Url.Action("GetUserApiKey", "Account")",
                data: { username: username },
                success: function (data) {
                    if (data !== "" && data != "") {
                        if (!IsPeerConnected()) {
                            connectPeer();
                        }

                        var call = peer.call(data.apiKey, window.localStream);
                        call.on('stream', function (stream) {
                            $('#their-video').prop('src', URL.createObjectURL(stream));
                            step3(call);
                        });
                        

                    }
                }
            });
        }
        function IsPeerConnected() {
            if (peer != null) {
                if (peer.open == false) {
                    return false;
                }
                else if (peer.disconnected == true || peer.destroyed == true) {
                    return false;
                }
                else {
                    return true;
                }
            }
            return false;
        }
    
  </script>


<ul style="float:left">
@foreach(var user in Model){
    
    <li style="padding:10px">
        <span>@user</span>
        <button class="btn" onclick="return makeCall('@user')">Call</button>
    </li>

    
}
    </ul>

<div class="pure-g" style="float:right">

      <!-- Video area -->
      <div class="pure-u-2-3" id="video-container">
        <video id="their-video" autoplay></video>
        <video id="my-video" muted="true" autoplay></video>
      </div>

      <!-- Steps -->
      <div class="pure-u-1-3">
        <h2>Chat 360</h2>

        <!-- Get local audio/video stream -->
        <div id="step1">
          <p>Please click `allow` on the top of the screen so we can access your webcam and microphone for calls.</p>
          <div id="step1-error">
            <p>Failed to access the webcam and microphone. Make sure to run this demo on an http server and click allow when asked for permission by the browser.</p>
            <a href="#" class="pure-button pure-button-error" id="step1-retry">Try again</a>
          </div>
        </div>

        <!-- Make calls to others -->
        <div id="step2">
         
        </div>

        <!-- Call in progress -->
        <div id="step3">
          <p>Currently in call with <span id="their-id">...</span></p>
          <p><a href="#" class="pure-button pure-button-error" id="end-call">End call</a></p>
        </div>
        
          <div id="callerDiv">
              <p id="callerMessage"> </p>
              <button ></button>
          </div>
      </div>
</div>
